import { ButtonProps, ButtonVariants } from './types';
import { DefineComponent, ComponentOptionsMixin, PublicProps, ExtractPropTypes, JSXComponent, PropType } from 'vue';
import { ColorType } from '../../../../types/common/ColorType';
import { RouteLocationRaw } from 'vue-router';

declare const _default: __VLS_WithTemplateSlots< DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToOption<ButtonProps>, {
    active: boolean;
    appendIcon: undefined;
    baseColor: undefined;
    block: undefined;
    border: undefined;
    color: ColorType;
    density: ("default" | "comfortable" | "compact" | null) | undefined;
    disabled: boolean;
    elevation: undefined;
    exact: undefined;
    flat: boolean;
    height: undefined;
    href: undefined;
    icon: undefined;
    loading: undefined;
    maxHeight: undefined;
    maxWidth: undefined;
    minHeight: undefined;
    minWidth: undefined;
    position: undefined;
    prependIcon: undefined;
    readonly: undefined;
    replace: undefined;
    selectedClass: undefined;
    size: undefined;
    stacked: undefined;
    symbol: undefined;
    tag: undefined;
    text: undefined;
    theme: undefined;
    tile: undefined;
    to: undefined;
    value: undefined;
    variant: ButtonVariants;
    width: undefined;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly< ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToOption<ButtonProps>, {
    active: boolean;
    appendIcon: undefined;
    baseColor: undefined;
    block: undefined;
    border: undefined;
    color: ColorType;
    density: ("default" | "comfortable" | "compact" | null) | undefined;
    disabled: boolean;
    elevation: undefined;
    exact: undefined;
    flat: boolean;
    height: undefined;
    href: undefined;
    icon: undefined;
    loading: undefined;
    maxHeight: undefined;
    maxWidth: undefined;
    minHeight: undefined;
    minWidth: undefined;
    position: undefined;
    prependIcon: undefined;
    readonly: undefined;
    replace: undefined;
    selectedClass: undefined;
    size: undefined;
    stacked: undefined;
    symbol: undefined;
    tag: undefined;
    text: undefined;
    theme: undefined;
    tile: undefined;
    to: undefined;
    value: undefined;
    variant: ButtonVariants;
    width: undefined;
}>>>, {
    symbol: any;
    active: boolean;
    disabled: boolean;
    value: any;
    flat: boolean;
    replace: boolean;
    variant: ButtonVariants;
    theme: string;
    color: ColorType;
    readonly: boolean;
    tag: string;
    tile: boolean;
    selectedClass: string;
    elevation: string | number;
    text: string;
    size: string | number;
    icon: boolean | (string | (string | [path: string, opacity: number])[] | JSXComponent);
    href: string;
    to: RouteLocationRaw;
    exact: boolean;
    position: "fixed" | "static" | "absolute" | "relative" | "sticky";
    loading: string | boolean;
    height: string | number;
    maxHeight: string | number;
    maxWidth: string | number;
    minHeight: string | number;
    minWidth: string | number;
    width: string | number;
    density: "default" | "comfortable" | "compact" | null;
    border: string | number | boolean;
    baseColor: string;
    prependIcon: string | (string | [path: string, opacity: number])[] | JSXComponent;
    appendIcon: string | (string | [path: string, opacity: number])[] | JSXComponent;
    block: boolean;
    stacked: boolean;
}, {}>, {
    default?(_: {}): any;
    append?(_: {}): any;
    prepend?(_: {}): any;
    loader?(_: {}): any;
}>;
export default _default;
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToOption<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};
